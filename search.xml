<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EFI数据类型[EFI Data Types]</title>
    <url>/2022/03/28/EFI%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-EFI-Data-Types/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>还未更新完</strong><br>欢迎更正：<br>Bilibili : <a href="https://space.bilibili.com/503518259" >Maouai233</a><br>Mail : <a href="mailto:&#x4d;&#97;&#x6f;&#117;&#x61;&#x69;&#50;&#51;&#x33;&#64;&#x6f;&#x75;&#116;&#x6c;&#x6f;&#111;&#107;&#46;&#99;&#x6f;&#109;">&#x4d;&#97;&#x6f;&#117;&#x61;&#x69;&#50;&#51;&#x33;&#64;&#x6f;&#x75;&#116;&#x6c;&#x6f;&#111;&#107;&#46;&#99;&#x6f;&#109;</a><br>最初接触EDK2还是在最初的时候了，看谭老师的视频也有一些收获，对于EDKII的一些如<strong>UINTN、CHAR8、CHAR16</strong>不是太在意，后来就越看越奇怪了，去查阅了EDKII官方文档，一大片英文，这对于我并不友好，以我目前的文化程度，看了个大概，机器翻译再加上我个人的理解，就搞了这篇文章。<br>还有就是，封城了，停课了…</p>
<h1 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h1><table>
<thead>
<tr>
<th>类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EFI_STATUS</td>
<td>状态码，有成功、错误和警告</td>
</tr>
</tbody></table>
<h1 id="EFI-STATUS分条"><a href="#EFI-STATUS分条" class="headerlink" title="EFI_STATUS分条"></a>EFI_STATUS分条</h1><p>判断程序出错或打印Log必备：通常这样定义一个EFI_STATUS型变量，初始化为成功。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EFI_STATUS Status = EFI_SUCCESS;</span><br></pre></td></tr></table></figure>

<p>EDKII源代码中许多函数使用EFI_STATUS型，返回的值是EFI_STATUS型，所以可以使用以下来接收函数运行后返回的结果(前提是函数的return的要是EFI_STATUS型)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status = Function();</span><br></pre></td></tr></table></figure>
<p>也提供了专门来判断是否运行错误即返回错误代码的EFI_ERROR()，使用如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(EFI_ERROR(Status)) &#123;</span><br><span class="line">  <span class="keyword">return</span> Status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>意思是如果之前定义的EFI_STATUS类型的Status是错误的结果，就执行大括号中的代码（这里直接返回Status，会回到EFI SHELL或者返回上一个调用此的函数），如果不是则跳过。</p>
<p>它是可以后面手动更改值的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status = EFI_SUCCESS;</span><br></pre></td></tr></table></figure>

<p>具体如下：</p>
<h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p>高位清除，无符号，没有负数的情况。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EFI_SUCCESS</td>
<td>0</td>
<td>成功完成操作</td>
</tr>
</tbody></table>
<h2 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h2><table>
<thead>
<tr>
<th>类</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EFI_LOAD_ERROR</td>
<td>1</td>
<td>加载镜像Image失败</td>
</tr>
<tr>
<td>EFI_INVALID_PARAMETER</td>
<td>2</td>
<td>参数不正确</td>
</tr>
<tr>
<td>EFI_UNSUPPORTED</td>
<td>3</td>
<td>该操作不支持</td>
</tr>
<tr>
<td>EFI_BAD_BUFFER_SIZE</td>
<td>4</td>
<td>缓冲区Buffer的大小不适用于请求</td>
</tr>
<tr>
<td>EFI_BUFFER_TOO_SMALL</td>
<td>5</td>
<td>缓冲区不够大，无法容纳请求的数据</td>
</tr>
<tr>
<td>EFI_NOT_READY</td>
<td>6</td>
<td>There is no data pending upon return</td>
</tr>
<tr>
<td>EFI_DEVICE_ERROR</td>
<td>7</td>
<td>物理设备在尝试操作时报告错</td>
</tr>
<tr>
<td>EFI_WRITE_PROTECTED</td>
<td>8</td>
<td>无法写入设备</td>
</tr>
<tr>
<td>EFI_OUT_OF_RESOURCES</td>
<td>9</td>
<td>资源已用完</td>
</tr>
<tr>
<td>EFI_VOLUME_CORRUPTED</td>
<td>10</td>
<td>在文件系统上检测到一个不稳定因素，而导致运行失败</td>
</tr>
<tr>
<td>EFI_VOLUME_FULL</td>
<td>11</td>
<td>文件系统上没有更多空间</td>
</tr>
<tr>
<td>EFI_NO_MEDIA</td>
<td>12</td>
<td>该设备不包含任何介质来执行操作</td>
</tr>
<tr>
<td>EFI_MEDIA_CHANGED</td>
<td>13</td>
<td>自上次访问以来，设备中的介质已更改</td>
</tr>
<tr>
<td>EFI_NOT_FOUND</td>
<td>14</td>
<td>未找到该Item项目</td>
</tr>
<tr>
<td>EFI_ACCESS_DENIED</td>
<td>15</td>
<td>拒绝访问</td>
</tr>
<tr>
<td>EFI_NO_RESPONSE</td>
<td>16</td>
<td>未找到服务器或未响应请求</td>
</tr>
<tr>
<td>EFI_NO_MAPPING</td>
<td>17</td>
<td>到设备的映射不存在</td>
</tr>
<tr>
<td>EFI_TIMEOUT</td>
<td>18</td>
<td>超时</td>
</tr>
<tr>
<td>EFI_NOT_STARTED</td>
<td>19</td>
<td>Protocol尚未启动</td>
</tr>
<tr>
<td>EFI_ALREADY_STARTED</td>
<td>20</td>
<td>Protocol已经启动</td>
</tr>
<tr>
<td>EFI_ABORTED</td>
<td>21</td>
<td>操作被终止</td>
</tr>
<tr>
<td>EFI_ICMP_ERROR</td>
<td>22</td>
<td>网络操作期间发生ICMP错误</td>
</tr>
<tr>
<td>EFI_TFTP_ERROR</td>
<td>23</td>
<td>网络操作期间发生TFTP错误</td>
</tr>
<tr>
<td>EFI_PROTOCOL_ERROR</td>
<td>24</td>
<td>网络操作期间发生Protocol错误</td>
</tr>
<tr>
<td>EFI_INCOMPATIBLE_VERSION</td>
<td>25</td>
<td>The function encountered an internal version that was incompatible with a version requested by the caller</td>
</tr>
<tr>
<td>EFI_SECURITY_VIOLATION</td>
<td>26</td>
<td>由于安全违规，该功能未执行</td>
</tr>
<tr>
<td>EFI_CRC_ERROR</td>
<td>27</td>
<td>检测到CRC错误</td>
</tr>
<tr>
<td>EFI_END_OF_MEDIA</td>
<td>28</td>
<td>已到达媒体的开头或结尾</td>
</tr>
<tr>
<td>EFI_END_OF_FILE</td>
<td>31</td>
<td>已到达文件末尾</td>
</tr>
<tr>
<td>EFI_INVALID_LANGUAGE</td>
<td>32</td>
<td>指定的语言无效</td>
</tr>
<tr>
<td>EFI_COMPROMISED_DATA</td>
<td>33</td>
<td>数据的安全状态未知或受损，必须更新数据或替换数据以恢复有效的安全状态</td>
</tr>
<tr>
<td>EFI_IP_ADDRESS_CONFLICT</td>
<td>34</td>
<td>There is an address conflict address allocation</td>
</tr>
<tr>
<td>EFI_HTTP_ERROR</td>
<td>35</td>
<td>网络操作期间发生 HTTP 错误</td>
</tr>
</tbody></table>
<h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>高位清除，无符号，没有负数的情况。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>EFI_WARN_UNKNOWN_GLYPH</td>
<td>1</td>
<td>该字符串包含了设备的一个或多个字符无法渲染并被跳过</td>
</tr>
<tr>
<td>EFI_WARN_DELETE_FAILURE</td>
<td>2</td>
<td>Handle已关闭，但文件尚未删除</td>
</tr>
<tr>
<td>EFI_WARN_WRITE_FAILURE</td>
<td>3</td>
<td>The handle was closed, but the data to the file was not flushed properly</td>
</tr>
<tr>
<td>EFI_WARN_BUFFER_TOO_SMALL</td>
<td>4</td>
<td>存放结果的缓冲区太小，且数据被截断为缓冲区大小</td>
</tr>
<tr>
<td>EFI_WARN_STALE_DATA</td>
<td>5</td>
<td>The data has not been updated within the timeframe set by local policy for this type of data</td>
</tr>
<tr>
<td>EFI_WARN_FILE_SYSTEM</td>
<td>6</td>
<td>生成的缓冲区包含UEFI-compliant的文件系统</td>
</tr>
<tr>
<td>EFI_WARN_RESET_REQUIRED</td>
<td>7</td>
<td>该操作将在系统重置后被处理</td>
</tr>
</tbody></table>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>EDKII官方文档：<a href="https://uefi.org/sites/default/files/resources/UEFI_Spec_2_9_2021_03_18.pdf" >点此下载</a></p>
]]></content>
      <tags>
        <tag>UEFI</tag>
        <tag>EDKII</tag>
        <tag>Bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>一个Minecratf服务器自动配置脚本</title>
    <url>/2022/02/17/%E4%B8%80%E4%B8%AAMinecratf%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>Welcome To my Pages!</p>
<h1 id="下载并执行"><a href="#下载并执行" class="headerlink" title="下载并执行"></a>下载并执行</h1><h2 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h2><p>安装git:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git -y</span><br></pre></td></tr></table></figure>
<p>一般来说Ubuntu预装Git工具……<br>克隆仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/canyan233/install_minecraft_server.git</span><br></pre></td></tr></table></figure>
<p>取出脚本:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> install_minecraft_server/install-McServer-finally.sh .</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash ./install-McServer-finally.sh</span><br></pre></td></tr></table></figure>
<p><strong>一定不能用sh执行啊&gt;_&lt;</strong></p>
<h2 id="使用curl"><a href="#使用curl" class="headerlink" title="使用curl"></a>使用curl</h2><p>还可以用更简单的方法的.<br>安装curl:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl -y</span><br></pre></td></tr></table></figure>
<p>下载直接执行!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su -c <span class="string">&quot;bash &lt;(curl -s -S -L https://gitee.com/canyan233/raw/raw/master/install-McServer-finally.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用Wget"><a href="#使用Wget" class="headerlink" title="使用Wget"></a>使用Wget</h2><p>这个也很硬核哈，等同于上文使用curl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install wget -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su -c <span class="string">&quot;bash &lt;(wget -qO- https://gitee.com/canyan233/raw/raw/master/install-McServer-finally.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="使用脚本进行配置"><a href="#使用脚本进行配置" class="headerlink" title="使用脚本进行配置"></a>使用脚本进行配置</h1><p>执行过命令后，脚本会自动更新软件列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">命中:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic InRelease</span><br><span class="line">获取:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-updates InRelease [88.7 kB]</span><br><span class="line">获取:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-backports InRelease [74.6 kB]</span><br><span class="line">获取:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu bionic-security InRelease [88.7 kB]</span><br><span class="line">已下载 252 kB，耗时 3秒 (74.4 kB/s)              </span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成</span><br></pre></td></tr></table></figure>
<p>并安装<strong>Java</strong>与<strong>iptables</strong>(默认是default-jdk，由于信息太大，将输出重定向到&#x2F;dev&#x2F;null以<strong>舍去</strong>哈).<br>将会在<strong>家</strong>创建一个目录<strong>tmp-mcserver</strong>存放临时文件.<br><strong>没有意外的话就下一步啦，但我们考虑到了意外QwQ……那就是安装的服务器目录下有另外一个叫”server.jar”的文件，也对此作出了解决.</strong><br>#运行实录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">It is detected that there is already a <span class="string">&quot;server.jar&quot;</span> file, please install it <span class="keyword">in</span> another directory</span><br><span class="line">delete(d);<span class="built_in">exit</span>(e);Continue to install this Jar(c)|</span><br></pre></td></tr></table></figure>
<p>如下解释：<br>输入d &#x3D;&gt; 删除server.jar文件<br>输入e &#x3D;&gt; 退出，你解不解决吧？<br>输入c &#x3D;&gt; 直接安装这个.我走啦哈.<br>不会吧，不会吧，这个应该没有人看不懂吧?<br><br><br>如果没有那个server.jar文件就可以选择了（或者有已经删除）,Okayyyy.选择时间！这里我选 1.7.10[服务端版本号].<br>接下来是没有以外的情况.这个好诶.JPG</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">--------------------------------</span><br><span class="line">--------------------------------</span><br><span class="line">1.17.1  1.17    1.16.5</span><br><span class="line">1.16.4  1.16.3  1.16.2</span><br><span class="line">1.16.1  1.15.2  1.15.1</span><br><span class="line">1.15    1.14.4  1.14.3</span><br><span class="line">1.14.2  1.14.1  1.14</span><br><span class="line">1.13.2  1.13.1  1.13</span><br><span class="line">1.12.2  1.12.1  1.12</span><br><span class="line">1.11.2  1.11.1  1.10.2</span><br><span class="line">1.10    1.9.4   1.9.2</span><br><span class="line">1.9     1.8.8   1.8.7</span><br><span class="line">1.8.6   1.8.5   1.8.4</span><br><span class="line">1.8.3   1.8     1.7.10</span><br><span class="line">1.7.9   1.7.8   1.7.5</span><br><span class="line">1.7.2   1.6.4   1.6.2</span><br><span class="line">1.5.2   1.5.1   1.4.7</span><br><span class="line">1.4.6</span><br><span class="line"> Choose my Jar of Server(r)</span><br><span class="line">--------------------------------</span><br><span class="line">Enter the version you want to install:</span><br></pre></td></tr></table></figure>
<p>之后是自动配置时间!将会安装screen工具以创建一个命令行终端在后台配置及运行Minecraft服务器.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">Installing screeen...done</span><br><span class="line">Configuring server...................done</span><br></pre></td></tr></table></figure>
<p>需要同意一下这个协议（eula.txt内容），我想没有人选Ctrl-C吧……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">--------------------------------</span><br><span class="line">By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).</span><br><span class="line">2022-02-08 16:30:17</span><br><span class="line">--------------------------------</span><br><span class="line">Just so you know, by downloading any of the software on this page, you agree to theMinecraft End User License AgreementandPrivacy Policy.</span><br><span class="line">--------------------------------</span><br><span class="line">Angree(<span class="built_in">yes</span>)|<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is 1.7.10+</span><br></pre></td></tr></table></figure>
<p>接下来是一系列的配置<br>输入您希望的Minecraft服务器端口号.默认25565.必须要输入,不然我不给你过.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">Please enter the Server port number|</span><br></pre></td></tr></table></figure>
<p>输入您希望的启动脚本所在位置(生成位置).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">Please enter the generated startup script directory|For example: /root/ |</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">Create startup script...done</span><br><span class="line">The startup script has been created <span class="keyword">in</span> *$%@ <span class="comment">#是个变量，我总不可能用我的路径来迷惑你们吧？</span></span><br></pre></td></tr></table></figure>
<p>回车之后请稍等，最终花费时间将取决于计算机性能……<del>像我计算机这么差的性能都可以28s过……</del><br>最后，看到如下信息就成功了哈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行实录</span></span><br><span class="line">=============Ok=============</span><br></pre></td></tr></table></figure>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="1-1-为什么不可以用”curl-wget-pO-URL-bash”命令执行？"><a href="#1-1-为什么不可以用”curl-wget-pO-URL-bash”命令执行？" class="headerlink" title="1.1 为什么不可以用”curl (wget -pO-) URL|bash”命令执行？"></a>1.1 为什么不可以用”curl (wget -pO-) URL|bash”命令执行？</h2><p><strong>A：不保存为文件，read命令直接被跳过，功能不能实现，无互动的功能.</strong></p>
<h2 id="1-2-E-无法定位软件包-default-jdk并找不到java命令"><a href="#1-2-E-无法定位软件包-default-jdk并找不到java命令" class="headerlink" title="1.2 E: 无法定位软件包 default-jdk并找不到java命令"></a>1.2 E: 无法定位软件包 default-jdk并找不到java命令</h2><p><strong>A: 手动安装java,这里只说一下OpenJDK安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-cache search openjdk</span><br></pre></td></tr></table></figure>
<p><strong>将会在输出中找到一下几行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#差不多的运行结果</span></span><br><span class="line">openjdk-11-jdk - OpenJDK Development Kit (JDK)</span><br><span class="line">openjdk-11-jdk-headless - OpenJDK Development Kit (JDK) (headless)</span><br><span class="line">openjdk-11-jre - OpenJDK Java runtime, using Hotspot JIT</span><br><span class="line">openjdk-11-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless)</span><br></pre></td></tr></table></figure>
<p><strong>你也可以在其中找到”openjdk-?-jdk”与”openjdk-?-jre”，并安装它</strong><br>sudo apt install openjdk-11-jre openjdk-11-jdk -y<br><strong>再运行脚本.</strong></p>
<h1 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h1><iframe src="//player.bilibili.com/player.html?aid=759870508&bvid=BV1h64y1q7cH&cid=388857105&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h1 id="Git仓库"><a href="#Git仓库" class="headerlink" title="Git仓库"></a>Git仓库</h1><h2 id="项目仓库-Proj"><a href="#项目仓库-Proj" class="headerlink" title="项目仓库[Proj]"></a>项目仓库[Proj]</h2><p><strong>Https &#x3D;&gt; <a href="https://gitee.com/canyan233/install_minecraft_server">https://gitee.com/canyan233/install_minecraft_server</a></strong></p>
<h2 id="2-原始代码仓库-Raw"><a href="#2-原始代码仓库-Raw" class="headerlink" title="2.原始代码仓库[Raw]"></a>2.原始代码仓库[Raw]</h2><p><strong>Https &#x3D;&gt; <a href="https://gitee.com/canyan233/raw/raw/master/install-McServer-finally.sh">https://gitee.com/canyan233/raw/raw/master/install-McServer-finally.sh</a></strong></p>
]]></content>
      <tags>
        <tag>Bilibili</tag>
        <tag>Minecraft</tag>
        <tag>Linux</tag>
        <tag>脚本</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Busybox-httpd在电视盒子上搭建一个静态网站</title>
    <url>/2022/02/17/%E5%88%A9%E7%94%A8Busybox-httpd%E5%9C%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相信大家一定有搭建网站的“梦想”，这是一个探索，就是利用httpd来搭建一个不简单的静态网页，而httpd可以集成在Busybox当中，最大的困难，也就是交叉编译Busybox了。网络上使用GitHub Pages的网页大多是用Hexo做成的，它可以把MarkDown文档渲染成静态网页，我们的目标就是使用Httpd来运行Hexo渲染的网页，这也非常简单！</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>盒子是安卓系统，而安卓基于Linux，先查看盒子的架构，在安装相应的交叉编译工具，由于默认编译的busybox会在&#x2F;usr&#x2F;lib或&#x2F;lib下查找共享库文件，而安卓系统并不具备所有的条件，所以我们将以静态方式编译。使用adb工具把编译好的二进制可执行文件和静态网页上传到安卓上，使用“busybox httpd”启动即可。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="编译Busybox"><a href="#编译Busybox" class="headerlink" title="编译Busybox"></a>编译Busybox</h2><h3 id="查看架构"><a href="#查看架构" class="headerlink" title="查看架构"></a>查看架构</h3><p>我们需要使用adb连接到电视盒子，首先安装adb.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install android-tools-adb -y</span><br></pre></td></tr></table></figure>
<p>我选择用网络连接盒子，需要查看盒子的ip地址，可以登录路由器后台查看：</p>
<img src="/2022/02/17/%E5%88%A9%E7%94%A8Busybox-httpd%E5%9C%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/2.png" class="" title="none">
<p>我的是192.168.1.26<br>用adb命令连接它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.1.26</span><br></pre></td></tr></table></figure>
<p>运行后是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行后实录</span></span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">connected to 192.168.1.26:5555</span><br></pre></td></tr></table></figure>
<p>然后查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell <span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>
<p>这段是指，使用电视盒子下安卓系统上的默认终端执行”uname -a”<br>我的运行后是这样的，不同的机器可能不同：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux localhost 3.10.0_s40 <span class="comment">#1 SMP Thu May 28 18:02:20 CST 2020 armv7l GNU/Linux</span></span><br></pre></td></tr></table></figure>
<p>可以看到，这个盒子是armv7l的，可以说是arm32.那么交叉编译器就是arm开头，</p>
<h3 id="安装交叉编译工具"><a href="#安装交叉编译工具" class="headerlink" title="安装交叉编译工具"></a>安装交叉编译工具</h3><p>但是，软件源中的gcc交叉编译工具一般是这种格式：gcc-arm-linux-gnueabi.安装这个是可以的，一般安装后可以自动转成：arm-linux-gnueabi-gcc.也可以直接下载交叉编译器的压缩包，解压并设置环境变量就好了（环境变量博客里专门有教程）.<br>输入这个，如果输出版本信息就ok：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabi-gcc -v</span><br></pre></td></tr></table></figure>
<h3 id="下载Busybox源码"><a href="#下载Busybox源码" class="headerlink" title="下载Busybox源码"></a>下载Busybox源码</h3><h4 id="对于wget"><a href="#对于wget" class="headerlink" title="对于wget"></a>对于wget</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install wget -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.35.0.tar.bz2</span><br></pre></td></tr></table></figure>
<h4 id="对于curl"><a href="#对于curl" class="headerlink" title="对于curl"></a>对于curl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install curl -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://busybox.net/downloads/busybox-1.35.0.tar.bz2</span><br></pre></td></tr></table></figure>
<h3 id="解压Busybox源码"><a href="#解压Busybox源码" class="headerlink" title="解压Busybox源码"></a>解压Busybox源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf ./busybox-1.35.0.tar.bz2  </span><br></pre></td></tr></table></figure>
<p>切换工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> busybox-1.35.0</span><br></pre></td></tr></table></figure>
<h3 id="Busybox编译前配置"><a href="#Busybox编译前配置" class="headerlink" title="Busybox编译前配置"></a>Busybox编译前配置</h3><h4 id="安装make"><a href="#安装make" class="headerlink" title="安装make"></a>安装make</h4><p>既然要用makefile，必须要有make啊…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt make -y</span><br></pre></td></tr></table></figure>
<h4 id="正式配置"><a href="#正式配置" class="headerlink" title="正式配置"></a>正式配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm defconfig</span><br></pre></td></tr></table></figure>
<p>这里的”CROSS_COMPILE&#x3D;”指定交叉编译器，”arm-linux-gnueabi-“是我们要用到的交叉编译器前缀，简单来说就是arm-linux-gnueabi-gcc除掉gcc以外的部分，一般这是个变量，编译时需要交叉编译工具时，会在gcc或ld前自动加上arm-linux-gnueabi-，如果不指定，就是利用系统默认的gcc编译，编译获得的二进制文件的架构就是编译主机的架构.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm menuconfig</span><br></pre></td></tr></table></figure>
<p>会启动一个“图形化菜单”，利用方向键以移动，enter键确定，空格键选中.</p>
<img src="/2022/02/17/%E5%88%A9%E7%94%A8Busybox-httpd%E5%9C%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/menu_!.png" class="" title="none">
<p>Enter:<strong>Settings</strong></p>
<img src="/2022/02/17/%E5%88%A9%E7%94%A8Busybox-httpd%E5%9C%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/menu_!2.png" class="" title="none">
<p>空格:<strong>[ ] Build static binary (no shared libs)</strong><br>然后ESC+ESC退出整个菜单，选择保存</p>
<img src="/2022/02/17/%E5%88%A9%E7%94%A8Busybox-httpd%E5%9C%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/menu_!3.png" class="" title="none">
<h3 id="正式编译"><a href="#正式编译" class="headerlink" title="正式编译"></a>正式编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm</span><br></pre></td></tr></table></figure>
<h3 id="成功编译"><a href="#成功编译" class="headerlink" title="成功编译"></a>成功编译</h3><p>如果在目录下看到一个叫做busybox的可执行文件，就半成功了.<br>我们用file命令查看busybox的架构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file ./busybox</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行后实录</span></span><br><span class="line">./busybox: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=9d5381f93c45bd41ce7b5a9a18b795b12652ab07, stripped</span><br></pre></td></tr></table></figure>
<p>32位arm Soc，完全成功！</p>
<h2 id="上传busybox"><a href="#上传busybox" class="headerlink" title="上传busybox"></a>上传busybox</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ./busybox /sdcard</span><br></pre></td></tr></table></figure>
<p>指的是：使用adb把当前目录下的busybox上传到安卓设备（电视盒子）的&#x2F;sdcard目录下</p>
<h2 id="上传网页"><a href="#上传网页" class="headerlink" title="上传网页"></a>上传网页</h2><p>也可以自己写一个Html，我选择Hexo，简单且高效，关于Hexo的配置，我推荐官方文章：<a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a><br>比如说我们已经有一个网站文件夹public，将它上传至&#x2F;sdcard</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ./public /sdcard</span><br></pre></td></tr></table></figure>
<p>没想到吧，也可以上传整个文件夹.<br>接下来就进入盒子的远程shell来配置吧.</p>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure>
<p>进入盒子shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sdcard</span><br></pre></td></tr></table></figure>
<p>切换到上传文件所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./busybox</span><br></pre></td></tr></table></figure>
<p>busybox有可能不可以执行，给它可执行权限.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./busybox</span><br></pre></td></tr></table></figure>
<p>可以看到输出了一大堆命令.<br>使用以下命令开启httpd:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./busybox httpd -h public -p 8080</span><br></pre></td></tr></table></figure>
<p>httpd命令用法：httpd -h 网站根目录 -p 网站端口号，一般80，8080就是保险一点.<br>用浏览器访问”盒子ip:8080”，就可以看到网页了.</p>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="执行busybox时-”-x2F-system-x2F-bin-x2F-sh-x2F-busybox-not-executable-magic-7F45”"><a href="#执行busybox时-”-x2F-system-x2F-bin-x2F-sh-x2F-busybox-not-executable-magic-7F45”" class="headerlink" title="执行busybox时,”&#x2F;system&#x2F;bin&#x2F;sh: .&#x2F;busybox: not executable: magic 7F45”"></a>执行busybox时,”&#x2F;system&#x2F;bin&#x2F;sh: .&#x2F;busybox: not executable: magic 7F45”</h2><p><strong>编译错架构了，重新编译</strong></p>
<h2 id="x2F-system-x2F-bin-x2F-sh-x2F-busybox-No-such-file-or-directory"><a href="#x2F-system-x2F-bin-x2F-sh-x2F-busybox-No-such-file-or-directory" class="headerlink" title="&#x2F;system&#x2F;bin&#x2F;sh: .&#x2F;busybox: No such file or directory"></a>&#x2F;system&#x2F;bin&#x2F;sh: .&#x2F;busybox: No such file or directory</h2><p><strong>没有上传或者编译配置时没有勾选静态编译</strong></p>
<h2 id="有没有偷懒的方法（不编译）"><a href="#有没有偷懒的方法（不编译）" class="headerlink" title="有没有偷懒的方法（不编译）"></a>有没有偷懒的方法（不编译）</h2><p><strong>直接去busybox.net&#x2F;downloads&#x2F;binaries&#x2F;找到相应架构的二进制文件下载上传</strong></p>
<h1 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h1><iframe src="//player.bilibili.com/player.html?aid=679101618&bvid=BV11m4y1d7sx&cid=509689609&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><strong>我会在在此发出使用于Qemu的busybox编译文件img.gz</strong></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><strong>Busybox即FileSystem仓库 &#x3D;&#x3D;&gt; <a href="https://gitee.com/canyan233/qemu-ctrl-ready-repo">https://gitee.com/canyan233/qemu-ctrl-ready-repo</a></strong></p>
]]></content>
      <tags>
        <tag>Bilibili</tag>
        <tag>Linux</tag>
        <tag>网站</tag>
        <tag>电视盒子</tag>
        <tag>资源</tag>
      </tags>
  </entry>
</search>
